// Code generated by protoc-gen-go. DO NOT EDIT.
// source: table.proto

/*
Package rpcdatacontract is a generated protocol buffer package.

It is generated from these files:
	table.proto

It has these top-level messages:
	Column
	Cell
	Row
	Table
	Reply
	Request
*/
package rpcdatacontract

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Column struct {
	EnglishName string `protobuf:"bytes,1,opt,name=english_name,json=englishName" json:"english_name,omitempty"`
	ChineseName string `protobuf:"bytes,2,opt,name=chinese_name,json=chineseName" json:"chinese_name,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Column) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *Column) GetChineseName() string {
	if m != nil {
		return m.ChineseName
	}
	return ""
}

func (m *Column) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Cell struct {
	// Types that are valid to be assigned to Value:
	//	*Cell_ValString
	//	*Cell_ValInteger
	Value isCell_Value `protobuf_oneof:"value"`
}

func (m *Cell) Reset()                    { *m = Cell{} }
func (m *Cell) String() string            { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()               {}
func (*Cell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isCell_Value interface {
	isCell_Value()
}

type Cell_ValString struct {
	ValString string `protobuf:"bytes,1,opt,name=val_string,json=valString,oneof"`
}
type Cell_ValInteger struct {
	ValInteger float64 `protobuf:"fixed64,2,opt,name=val_integer,json=valInteger,oneof"`
}

func (*Cell_ValString) isCell_Value()  {}
func (*Cell_ValInteger) isCell_Value() {}

func (m *Cell) GetValue() isCell_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Cell) GetValString() string {
	if x, ok := m.GetValue().(*Cell_ValString); ok {
		return x.ValString
	}
	return ""
}

func (m *Cell) GetValInteger() float64 {
	if x, ok := m.GetValue().(*Cell_ValInteger); ok {
		return x.ValInteger
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cell) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cell_OneofMarshaler, _Cell_OneofUnmarshaler, _Cell_OneofSizer, []interface{}{
		(*Cell_ValString)(nil),
		(*Cell_ValInteger)(nil),
	}
}

func _Cell_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cell)
	// value
	switch x := m.Value.(type) {
	case *Cell_ValString:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ValString)
	case *Cell_ValInteger:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.ValInteger))
	case nil:
	default:
		return fmt.Errorf("Cell.Value has unexpected type %T", x)
	}
	return nil
}

func _Cell_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cell)
	switch tag {
	case 1: // value.val_string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Cell_ValString{x}
		return true, err
	case 2: // value.val_integer
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Cell_ValInteger{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Cell_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cell)
	// value
	switch x := m.Value.(type) {
	case *Cell_ValString:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ValString)))
		n += len(x.ValString)
	case *Cell_ValInteger:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Row struct {
	Cells []*Cell `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Row) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type Table struct {
	Columns []*Column `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Rows    []*Row    `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Table) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Table) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Reply struct {
	Tables []*Table `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Reply) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

type Request struct {
	Question string `protobuf:"bytes,1,opt,name=question" json:"question,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Request) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func init() {
	proto.RegisterType((*Column)(nil), "rpcdatacontract.Column")
	proto.RegisterType((*Cell)(nil), "rpcdatacontract.Cell")
	proto.RegisterType((*Row)(nil), "rpcdatacontract.Row")
	proto.RegisterType((*Table)(nil), "rpcdatacontract.Table")
	proto.RegisterType((*Reply)(nil), "rpcdatacontract.Reply")
	proto.RegisterType((*Request)(nil), "rpcdatacontract.Request")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AI service

type AIClient interface {
	// AI response
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type aIClient struct {
	cc *grpc.ClientConn
}

func NewAIClient(cc *grpc.ClientConn) AIClient {
	return &aIClient{cc}
}

func (c *aIClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/rpcdatacontract.AI/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AI service

type AIServer interface {
	// AI response
	Process(context.Context, *Request) (*Reply, error)
}

func RegisterAIServer(s *grpc.Server, srv AIServer) {
	s.RegisterService(&_AI_serviceDesc, srv)
}

func _AI_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcdatacontract.AI/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _AI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcdatacontract.AI",
	HandlerType: (*AIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _AI_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "table.proto",
}

func init() { proto.RegisterFile("table.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6b, 0xf2, 0x40,
	0x10, 0xc6, 0x8d, 0x1a, 0xf3, 0x3a, 0x79, 0xa1, 0xb0, 0xb4, 0x36, 0x78, 0xa9, 0x06, 0x0a, 0x42,
	0x21, 0x50, 0x7b, 0xe8, 0xa9, 0x87, 0xd6, 0x8b, 0x5e, 0x4a, 0x59, 0x7b, 0x97, 0x75, 0x1d, 0x34,
	0xb0, 0xee, 0xa6, 0xbb, 0xab, 0xe2, 0xb7, 0x2f, 0x99, 0xc4, 0x1e, 0x9a, 0xde, 0x26, 0xcf, 0xfc,
	0x9e, 0xf9, 0x97, 0x85, 0xd8, 0x8b, 0xb5, 0xc2, 0xac, 0xb0, 0xc6, 0x1b, 0x76, 0x65, 0x0b, 0xb9,
	0x11, 0x5e, 0x48, 0xa3, 0xbd, 0x15, 0xd2, 0xa7, 0x6b, 0xe8, 0xcd, 0x8c, 0x3a, 0xec, 0x35, 0x1b,
	0xc3, 0x7f, 0xd4, 0x5b, 0x95, 0xbb, 0xdd, 0x4a, 0x8b, 0x3d, 0x26, 0xc1, 0x28, 0x98, 0xf4, 0x79,
	0x5c, 0x6b, 0xef, 0x62, 0x8f, 0x25, 0x22, 0x77, 0xb9, 0x46, 0x87, 0x15, 0xd2, 0xae, 0x90, 0x5a,
	0x23, 0x84, 0x41, 0xd7, 0x9f, 0x0b, 0x4c, 0x3a, 0x94, 0xa2, 0x38, 0x5d, 0x42, 0x77, 0x86, 0x4a,
	0xb1, 0x3b, 0x80, 0xa3, 0x50, 0x2b, 0xe7, 0x6d, 0xae, 0xb7, 0x55, 0xfd, 0x79, 0x8b, 0xf7, 0x8f,
	0x42, 0x2d, 0x49, 0x62, 0x63, 0x88, 0x4b, 0x20, 0xd7, 0x1e, 0xb7, 0x68, 0xa9, 0x7c, 0x30, 0x6f,
	0xf1, 0xd2, 0xb5, 0xa8, 0xb4, 0xb7, 0x08, 0xc2, 0xa3, 0x50, 0x07, 0x4c, 0xa7, 0xd0, 0xe1, 0xe6,
	0xc4, 0x1e, 0x20, 0x94, 0xa8, 0x94, 0x4b, 0x82, 0x51, 0x67, 0x12, 0x4f, 0x6f, 0xb2, 0x5f, 0x0b,
	0x66, 0x65, 0x67, 0x5e, 0x31, 0xe9, 0x06, 0xc2, 0xcf, 0xf2, 0x18, 0xec, 0x11, 0x22, 0x49, 0x5b,
	0x5f, 0x7c, 0xb7, 0x4d, 0x1f, 0xe5, 0xf9, 0x85, 0x63, 0x13, 0xe8, 0x5a, 0x73, 0x72, 0x49, 0x9b,
	0xf8, 0xeb, 0x06, 0xcf, 0xcd, 0x89, 0x13, 0x91, 0x3e, 0x43, 0xc8, 0xb1, 0x50, 0x67, 0x96, 0x41,
	0x8f, 0x6e, 0x7f, 0x69, 0x32, 0x68, 0x98, 0x68, 0x1a, 0x5e, 0x53, 0xe9, 0x3d, 0x44, 0x1c, 0xbf,
	0x0e, 0xe8, 0x3c, 0x1b, 0xc2, 0x3f, 0x0a, 0x72, 0xa3, 0xeb, 0x1f, 0xf1, 0xf3, 0x3d, 0x9d, 0x41,
	0xfb, 0x75, 0xc1, 0x5e, 0x20, 0xfa, 0xb0, 0x46, 0xa2, 0x73, 0x2c, 0x69, 0x0e, 0x53, 0x95, 0x19,
	0x0e, 0xfe, 0xc8, 0x14, 0xea, 0x9c, 0xb6, 0xd6, 0x3d, 0x7a, 0x0f, 0x4f, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x52, 0xd2, 0xc1, 0x8f, 0x1e, 0x02, 0x00, 0x00,
}
